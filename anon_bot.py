import os
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import ( Application, ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler, filters)
from threading import Thread

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
ADMIN_ID = 5752325781

user_messages = {}
user_original_messages = {}
admin_to_user_messages = {}
user_replied_to_admin = {}

async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞.")

async def forward_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì© –í—ã–∑–≤–∞–Ω forward_to_admin")
    user = update.effective_user
    msg = update.message
    is_reply_to_admin = False
    admin_msg_caption = ""

    if msg.reply_to_message:
        replied_msg = msg.reply_to_message
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (replied_msg.text and "üì¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:" in replied_msg.text) or            (replied_msg.caption and "üì¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:" in replied_msg.caption):
            is_reply_to_admin = True
            if replied_msg.text:
                admin_text = replied_msg.text.replace("üì¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", "")
                preview = admin_text[:50] + "..." if len(admin_text) > 50 else admin_text
                admin_msg_caption = f" (–æ—Ç–≤–µ—Ç –Ω–∞: \"{preview}\")"
            elif replied_msg.photo:
                admin_msg_caption = " (–æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∞)"
            elif replied_msg.video:
                admin_msg_caption = " (–æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏–¥–µ–æ –∞–¥–º–∏–Ω–∞)"
            elif replied_msg.sticker:
                admin_msg_caption = " (–æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∏–∫–µ—Ä –∞–¥–º–∏–Ω–∞)"
            elif replied_msg.voice:
                admin_msg_caption = " (–æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞)"
            elif replied_msg.video_note:
                admin_msg_caption = " (–æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞)"
            elif replied_msg.animation:
                admin_msg_caption = " (–æ—Ç–≤–µ—Ç –Ω–∞ GIF –∞–¥–º–∏–Ω–∞)"

    caption = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or '–±–µ–∑ username'} (ID: {user.id}){admin_msg_caption}"
    sent = None
    reply_to_msg_id = None

    if not is_reply_to_admin:
        for msg_id, stored_user_id in user_messages.items():
            if stored_user_id == user.id:
                reply_to_msg_id = msg_id
                break

    if msg.text:
        sent = await context.bot.send_message(chat_id=ADMIN_ID, text=f"{caption}:{msg.text}", reply_to_message_id=reply_to_msg_id)
    elif msg.photo:
        sent = await context.bot.send_photo(chat_id=ADMIN_ID, photo=msg.photo[-1].file_id, caption=caption, reply_to_message_id=reply_to_msg_id)
    elif msg.video:
        sent = await context.bot.send_video(chat_id=ADMIN_ID, video=msg.video.file_id, caption=caption, reply_to_message_id=reply_to_msg_id)
    elif msg.sticker:
        sent = await context.bot.send_sticker(chat_id=ADMIN_ID, sticker=msg.sticker.file_id, reply_to_message_id=reply_to_msg_id)
        await context.bot.send_message(chat_id=ADMIN_ID, text=caption, reply_to_message_id=reply_to_msg_id)
    elif msg.voice:
        sent = await context.bot.send_voice(chat_id=ADMIN_ID, voice=msg.voice.file_id, caption=caption, reply_to_message_id=reply_to_msg_id)
    elif msg.video_note:
        sent = await context.bot.send_video_note(chat_id=ADMIN_ID, video_note=msg.video_note.file_id, reply_to_message_id=reply_to_msg_id)
        await context.bot.send_message(chat_id=ADMIN_ID, text=caption, reply_to_message_id=reply_to_msg_id)
    elif msg.animation:
        sent = await context.bot.send_animation(chat_id=ADMIN_ID, animation=msg.animation.file_id, caption=caption, reply_to_message_id=reply_to_msg_id)
    else:
        await msg.reply_text("‚ùóÔ∏è –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return

    if sent:
        user_messages[sent.message_id] = user.id
        user_original_messages[sent.message_id] = msg.message_id

    confirm = await msg.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")
    await asyncio.sleep(5)
    await confirm.delete()

async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    if not update.message.reply_to_message:
        msg = await update.message.reply_text("‚ùóÔ∏è–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await asyncio.sleep(5)
        await msg.delete()
        return

    replied_msg_id = update.message.reply_to_message.message_id
    if replied_msg_id in user_messages:
        user_id = user_messages[replied_msg_id]
        original_msg_id = user_original_messages.get(replied_msg_id)

        if update.message.text:
            reply = await context.bot.send_message(chat_id=user_id, text=f"üì¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:{update.message.text}", reply_to_message_id=original_msg_id)
        elif update.message.sticker:
            reply = await context.bot.send_sticker(chat_id=user_id, sticker=update.message.sticker.file_id, reply_to_message_id=original_msg_id)
        elif update.message.voice:
            reply = await context.bot.send_voice(chat_id=user_id, voice=update.message.voice.file_id, reply_to_message_id=original_msg_id)
        elif update.message.video_note:
            reply = await context.bot.send_video_note(chat_id=user_id, video_note=update.message.video_note.file_id, reply_to_message_id=original_msg_id)
        elif update.message.photo:
            reply = await context.bot.send_photo(chat_id=user_id, photo=update.message.photo[-1].file_id, reply_to_message_id=original_msg_id)
        elif update.message.video:
            reply = await context.bot.send_video(chat_id=user_id, video=update.message.video.file_id, reply_to_message_id=original_msg_id)
        elif update.message.animation:
            reply = await context.bot.send_animation(chat_id=user_id, animation=update.message.animation.file_id, reply_to_message_id=original_msg_id)
        else:
            return

        admin_to_user_messages[user_id] = reply.message_id
        confirm = await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await asyncio.sleep(5)
        await confirm.delete()
    else:
        msg = await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        await asyncio.sleep(5)
        await msg.delete()

# –ó–∞–ø—É—Å–∫
TOKEN = os.getenv("BOT_TOKEN")
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = f"/{TOKEN}"
WEBHOOK_URL = RENDER_URL + WEBHOOK_PATH

if not TOKEN or not RENDER_URL:
    raise RuntimeError("‚ùó –£–±–µ–¥–∏—Å—å, —á—Ç–æ BOT_TOKEN –∏ RENDER_EXTERNAL_URL –∑–∞–¥–∞–Ω—ã –≤ Render")

web_app = Flask(__name__)

@web_app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@web_app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), app.bot)
    app.update_queue.put_nowait(update)
    return "OK"

async def setup_webhook(app: Application):
    await app.bot.set_webhook(WEBHOOK_URL)
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

app = ( ApplicationBuilder().token(TOKEN).post_init(setup_webhook).build())
app.add_handler(CommandHandler("start", handle_start))
app.add_handler(MessageHandler(filters.ALL & filters.User(ADMIN_ID), handle_admin_reply))
app.add_handler(MessageHandler(filters.ALL & ~filters.User(ADMIN_ID), forward_to_admin))

def run_flask():
    web_app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

async def main():
    Thread(target=run_flask).start()  # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    await app.initialize()
    print("‚û°Ô∏è initialize done")
    await app.start()
    print("‚û°Ô∏è start done")

if __name__ == "__main__":
    asyncio.run(main())
